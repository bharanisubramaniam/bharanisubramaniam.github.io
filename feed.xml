<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Iter 0</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Iter 0</title>
    <subtitle>Iter0 is my personal blog. This is my attempt to write down my experience in trying out different software solutions.</subtitle>
    <author>
        <name>Maintained by Bharani.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2020-05-28T10:14:07.125872+00:00</updated>

    
    <entry>
        <title>[Draft] Hydra - OAuth2 Provider</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/05/28/Hydra - OAuth2 Provider.html" type="text/html" title="[Draft] Hydra - OAuth2 Provider" />
        <published>2020-05-28T00:00:00+00:00</published>
        <updated>2020-05-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/05/28/Hydra - OAuth2 Provider.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/05/28/Hydra - OAuth2 Provider.html">&lt;h2&gt;&lt;a href=&quot;#what-is-oauth2&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-is-oauth2&quot;&gt;&lt;/a&gt;What is OAuth2?&lt;/h2&gt;
</content>

        <author>
            <name>Bharani</name>
        </author>
    </entry>
    
    <entry>
        <title>Introduction to OAuth2</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/05/18/Introduction to OAuth2.html" type="text/html" title="Introduction to OAuth2" />
        <published>2020-05-18T00:00:00+00:00</published>
        <updated>2020-05-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/05/18/Introduction to OAuth2.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/05/18/Introduction to OAuth2.html">&lt;h2&gt;&lt;a href=&quot;#what-is-oauth2&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-is-oauth2&quot;&gt;&lt;/a&gt;What is OAuth2?&lt;/h2&gt;
&lt;p&gt;When you search for OAuth2 you come across definitions like&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“OAuth2 is the industry-standard protocol for authorization”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We usually relate authorization to a framework that enables us to restrict user activities and we implicitly assume that the user is first authenticated before these authorization rules can be enforced. But OAuth2 is not such an authorization framework. If you are a beginner it is hard to clearly define OAuth2 without highlighting the needs that drove the industry towards it.&lt;/p&gt;
&lt;p&gt;Let's start with a simple authentication setup, highlight the problems we face in this setup and then slowly make changes to address these problems.Towards the end we will connect it all back to OAuth2.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#once-upon-a-time&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;once-upon-a-time&quot;&gt;&lt;/a&gt;Once upon a time...&lt;/h2&gt;
&lt;p&gt;Every application implemented its own authentication mechanism. Users will authenticate with each application and then use its services.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-18/before-oauth2.png&quot; alt=&quot;Before OAuth2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This setup works but there are a few problems associated with it&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Users have to set up their identity multiple times in different applications.&lt;/li&gt;
&lt;li&gt;It is not easy to let &amp;quot;Application - A&amp;quot; access resources of &amp;quot;Application - B&amp;quot; without sharing secrets&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href=&quot;#centralise-identity&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;centralise-identity&quot;&gt;&lt;/a&gt;Centralise Identity&lt;/h2&gt;
&lt;p&gt;If the two applications ( A &amp;amp; B ) are part of a larger ecosystem of applications then it is possible to  extract the identity itself as a central application. Now the landscape looks like&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-18/central-idp.png&quot; alt=&quot;Central IDP&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This solves the challenge of duplicating identities but creates a new problem.How can you safely convey to Application  A &amp;amp; B that we have already authenticated via this central Application - Identity? We can’t and shouldn’t share secrets but we can use tokens.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#tokens&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;tokens&quot;&gt;&lt;/a&gt;Tokens&lt;/h2&gt;
&lt;p&gt;Once the user authenticates with our “Application - identity” we can create a token and use it to  communicate the intent that the user has successfully authenticated with Application A and B. Tokens act as a level of indirection to a user's credentials so we don’t have to share them to prove the identity of the user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-18/oauth2.png&quot; alt=&quot;OAuth2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;However we do need some mechanism to manage the lifecycle of these tokens i.e. make sure they can’t be tampered, expose APIs to validate their lifetime or refresh before it expires. For now let's call it Token management application&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#oauth2-terminology&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;oauth2-terminology&quot;&gt;&lt;/a&gt;OAuth2 Terminology&lt;/h2&gt;
&lt;p&gt;With this background we can now map our setup to OAuth2 terminology&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application A  &amp;amp;  B     =&amp;gt;   Client applications or just clients&lt;/li&gt;
&lt;li&gt;Application - Identity  =&amp;gt;  Identity Provider&lt;/li&gt;
&lt;li&gt;Application - Token management   =&amp;gt;   OAuth2 Provider&lt;/li&gt;
&lt;li&gt;Tokens  =&amp;gt;  Bearer token&lt;/li&gt;
&lt;li&gt;Users   =&amp;gt; Resource owner&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OAuth2 Provider is authorizing the access of Applications (A &amp;amp; B) to the user's resources via the bearer token. It is still the Identity provider that authenticates user. With this context we can tweak the definition of OAuth2 little bit to explicity convey this nouanced difference.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“OAuth2 is the industry-standard protocol for authorizing access to user’s resources”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>

        <author>
            <name>Bharani</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Iter0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/05/05/Iter0.html" type="text/html" title="Announcing Iter0" />
        <published>2020-05-05T00:00:00+00:00</published>
        <updated>2020-05-05T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/05/05/Iter0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/05/05/Iter0.html">&lt;h2&gt;&lt;a href=&quot;#what-is-iter0&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-is-iter0&quot;&gt;&lt;/a&gt;What is Iter0&lt;/h2&gt;
&lt;p&gt;Iter0 is my attempt to distil the experience of evaluating software solutions - frameworks, libraries, utilities or platforms. I don't claim my evaluation to be complete but it should be good enough to get things started. No solution is perfect and can meet all the requirements so I evaluate on the important aspects that form the foundation of the system I am considering to build.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#why-bother-to-document-it-here&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;why-bother-to-document-it-here&quot;&gt;&lt;/a&gt;Why bother to document it here?&lt;/h2&gt;
&lt;p&gt;I always wanted to write it down and I am glad I finally did.&lt;/p&gt;
</content>

        <author>
            <name>Bharani</name>
        </author>
    </entry>
    
</feed>
